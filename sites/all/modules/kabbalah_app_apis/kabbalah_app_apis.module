<?php
	require_once 'sites/all/modules/twistal/includes/twistal.admin.inc';
	
	function kabbalah_app_apis_menu() {
			
		// App API's
		// 1. Gets all the course information 
		$items['k_app_api/all_courses'] = array(              
			'page callback'      => 'getCoursesJsonForApp',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		// 2. Gets all the lesson information related to the course. Course id is passed as an argument to this hook.
		$items['k_app_api/lsns_by_crs_id/%'] = array(              
			'page callback'      => 'getLessonsByCourseIdJsonForApp',
			'page arguments' => array(2),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		// 3. Gets all the course live events information grouped location 
		$items['k_app_api/live_evnts'] = array(              
			'page callback'      => 'getCoursesByLiveEventsDataForApp',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		//4. Get all Recommended lessons 
		
		$items['k_app_api/recommended_lsns/%/%'] = array(
			'page callback'    => 'getRecommendedLessosnsAppData',
			'page arguments' => array(2,3),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		//4. Get Node Info 
		
		$items['k_app_api/get_info/%'] = array(
			'page callback'    => 'getNodeInfoByNid',
			'page arguments' => array(2),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		// End of App API's
		
		return $items;
	  }	
	
	// App Apis
	
	function getNodeInfoByNid( $nid ) {	 	
		
		$sql =  "SELECT * ".
				"FROM {node n} ".
				"LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid ) ".
				"WHERE n.nid = ".$nid;
			
		$result = db_query( $sql);
		$node = "";
		foreach ($result as $record) 
		{		//$record = db_fetch_object( $result );
			$node = node_load($record->nid , NULL, TRUE);		
			$node->body = "";
			if( $node->type == 'lesson' ) 
			{  
					$node->video_info = twistal_video_data_ipad_view( $node->field_lesson_video['und'][0]['twistage_existing_videos'] );
			}
		}
		//header('Content-Type: application/json');
		set_mycustom_api_headers();
		echo $_GET['callback']."(".json_encode($node).")";
		//echo json_encode( $node );
	}
		
	function getCoursesJsonForApp() {
	
		$sql = "SELECT n.*,d.field_event_date_value,d.field_event_date_value2
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {field_data_field_event_date d} ON ( nr.nid = d.entity_id AND nr.vid = d.revision_id )
				WHERE n.status =1
				AND n.type = 'course'
				ORDER BY n.changed DESC";
				
		$result = db_query( $sql );
		$result_array = array();
		
		$i = 0;
		
		foreach ($result as $record) 
		{	
			$node = node_load($nid = $record->nid );
			
			$comma_separated_author_names = "";
			$author_names = array();
			if( sizeof($node->field_author) > 0 )
			{
				foreach( $node->field_author['und'] as $author )	
				{	
					$author = taxonomy_term_load( $author['tid'] );
					$author_names[] = $author->name; 
				}
				$comma_separated_author_names = implode( ", " , $author_names );
			}
			
			$comma_separated_add_author_names = "";
			$additional_author_names = array();
			if( sizeof($node->field_additiona_authors) > 0 )
			{
				foreach( $node->field_additiona_authors['und'] as $add_author )	
				{	
					$add_author = taxonomy_term_load( $add_author['tid'] );
					$additional_author_names[] = $add_author->name; 
				}
				$comma_separated_add_author_names = implode( ", " , $additional_author_names );
			}
		   
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_app_body( $node->body['und'][0]['value'] , 0 );
			$subtitle = "";
			if( sizeof($node->field_subtitle) > 0 ) $subtitle = $node->field_subtitle['und'][0]['value'];
			
			$vocab_terms = _taxonomy_node_get_terms_by_vocabulary($node, 14 );
			foreach( $vocab_terms as $t )	{	$primary_topic = $t->name; }
			
			$secondary_topics = array();
			$vocab_terms1 = _taxonomy_node_get_terms_by_vocabulary($node, 13 );
			foreach( $vocab_terms1 as $t )	{	$secondary_topics[] = $t->name; }
			
			
			$vocab_terms3 = _taxonomy_node_get_terms_by_vocabulary($node, 11 );
			foreach( $vocab_terms3 as $t )	{	$type_of_course = $t->name; }
			
			if( $record->field_event_date_value == NULL )
			{
				$sDate = "";
			} 
			else
			{
				$oDate = new DateTime($record->field_event_date_value);
				//$sDate = $oDate->format('F jS, Y'); // Event Start Date
				$sDate = $oDate->getTimestamp(); // Event Start Date
			}
			
			if( $record->field_event_date_value2 == NULL )
			{
				$sDate2 = "";
			} 
			else
			{
				$oDate2 = new DateTime($record->field_event_date_value2);
				//$sDate2 = $oDate2->format('F jS, Y'); // Event End Date
				$sDate2 = $oDate2->getTimestamp();
			}
			
			$result_array[] = array(  'course_id' => $node->nid,
									  'course_type' => $type_of_course,	
									  'title' => $title ,
									  'subtitle' => $subtitle,									  									  
									  'image' => $node->field_image_cdn_link['und'][0]['value'] ,									  		
									  'description' => $teaser,
									  'authors' => $comma_separated_author_names ,
									  'authors_array' => $author_names ,
									  'additional_authors' => $comma_separated_add_author_names ,	
									  'additional_authors_array' => $additional_author_names ,	
									  'primary_topic' => $primary_topic,
									  'secondary_topics' => implode( ", " , $secondary_topics ),					
									  'secondary_topics_array' => $secondary_topics,					
									  'membership' => $membership->name,
									  'web_path' => $path ,					  
									  'created' => $node->created,
									  'modified' => $node->changed,
									  'event_start_date' => $sDate,
									  'event_end_date' => $sDate2,
									  'location address' =>	$node->field_location_address['und'][0]['value'],
									  'location city' => $node->field_location_city['und'][0]['value'],
									  'location zip code' => $node->field_location_zipcode['und'][0]['value'],
									  'location country' =>	$node->field_location_country['und'][0]['value']	
									);
		
		}
		//header('Content-type: application/json');
		set_mycustom_api_headers();
		//echo json_encode( $result_array );
		echo $_GET['callback']."(".json_encode($result_array).")";	
	}
	
	function getLessonsByCourseIdJsonForApp( $course_id ) {
	
		$sql = "SELECT n.nid , n.title as lesson_title, cl.field_course_list_nid , el.field_event_list_nid , n2.title
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {field_data_field_event_list el} ON ( nr.nid = el.entity_id AND nr.vid = el.revision_id )
				LEFT JOIN {field_data_field_course_list cl} ON ( nr.nid = cl.entity_id AND nr.vid = cl.revision_id )
				LEFT JOIN {node n2} ON ( cl.field_course_list_nid = n2.nid OR el.field_event_list_nid = n2.nid )
				WHERE n.status =1
				AND n.type = 'lesson'
				AND n2.nid = '".$course_id."'
				ORDER BY n.changed DESC";
					
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			
			$node = node_load($nid = $record->nid  );
			//print_r( $node );
			//exit;
			
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$subtitle = "";
			if( sizeof($node->field_subtitle) > 0 ) $subtitle = $node->field_subtitle['und'][0]['value'];
			$description="";
			if( sizeof($node->body) > 0 ) $description  = get_clean_app_body( $node->body['und'][0]['value'] , 0 );
			
			
			$comma_separated_author_names = "";
			$author_names = array();
			if( sizeof($node->field_author) > 0 )
			{
				foreach( $node->field_author['und'] as $author )	
				{	
					$author = taxonomy_term_load( $author['tid'] );
					$author_names[] = $author->name; 
				}
				$comma_separated_author_names = implode( ", " , $author_names );
			}
			
			$comma_separated_add_author_names = "";
			$add_author_names = array();
			if( sizeof($node->field_additiona_authors) > 0 )
			{
				foreach( $node->field_additiona_authors['und'] as $add_author )	
				{	
					$add_author = taxonomy_term_load( $add_author['tid'] );
					$add_author_names[] = $add_author->name; 
				}
				$comma_separated_add_author_names = implode( ", " , $add_author_names );
			}
			
			
			
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			
			$vocab_terms = _taxonomy_node_get_terms_by_vocabulary($node, 14 );
			foreach( $vocab_terms as $t )	{	$primary_topic = $t->name; }
			
			$secondary_topics = array();
			$vocab_terms1 = _taxonomy_node_get_terms_by_vocabulary($node, 13 );
			foreach( $vocab_terms1 as $t )	{	$secondary_topics[] = $t->name; }
			$comma_separated_secondary_topics = implode( ", " , $secondary_topics );
			
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$media_type = taxonomy_term_load($node->field_type_of_lesson['und'][0]['tid']);
			
			$highlights = get_clean_body( $node->field_lesson_highlights['und'][0]['value'] , 0 );
			
			$resources = array();
			if( sizeof( $node->field_lesson_resources) > 0  ) {
				$wrapper = entity_metadata_wrapper('node', $node);
				foreach ($wrapper->field_lesson_resources as $i)
				{
					$resources[] = array( 
											"resource_link" => $i->field_file_link->value() , 
											"resource_description" => $i->field_file_description->value() 
									);
				}
			}
			
			if( $media_type->name == 'Video' ) 	{
				
				$image_link = "http://twistassets.kabbalah.com/videos/".$node->field_lesson_video['und'][0]['twistage_existing_videos']."/screenshots/620w.jpg";
				$video_id = $node->field_lesson_video['und'][0]['twistage_existing_videos'];
				
			} else	{
			
				$course_nid= node_load( $nid = $node->field_course_list['und'][0]['nid'] );
				$image_link = $course_nid->field_image_cdn_link['und'][0]['value'];
				$audio_url = $node->field_audio_link['und'][0]['value'];	
			}
			
			$recorded_date = strtotime($node->field_recorded_date['und'][0]['value']);
			if( $recorded_date == "" ) $recorded_date = $node->changed;
			
			 $result_array[] = array(  'course_id' => $course_id,
									   'lesson_id' => $node->nid,
									   'title' => $title , 
									   'subtitle' => $subtitle,
									   'lesson_type' => $media_type->name,
									   'image' => $image_link,
									   'video_id' => $video_id,
									   'audio_url' => $audio_url,
									   'description' => $description,		
									   'authors' => $comma_separated_author_names ,
									   'authors_array' => $author_names ,
									   'additional_authors' => $comma_separated_add_author_names ,								  
									   'additional_authors_array' => $add_author_names ,								  
									   'primary_topic' => $primary_topic,
									   'secondary_topics' => $comma_separated_secondary_topics,
									   'secondary_topics_array' => $secondary_topics,
									   'membership' => $membership->name,
									   'recorded_date' => $recorded_date,
									   'web_path' => $path ,
									   'highlights' => $highlights,
									   'resources' => $resources,
									   'created' => $node->created,
									   'modified' => $node->changed,
									   'location address' =>	$node->field_location_address['und'][0]['value'],
									   'location city' => $node->field_location_city['und'][0]['value'],
									   'location zip code' => $node->field_location_zipcode['und'][0]['value'],
									   'location country' =>	$node->field_location_country['und'][0]['value']									   
									);
		}
		//header('Content-type: application/json');
		set_mycustom_api_headers();
		//echo json_encode( $result_array );
		echo $_GET['callback']."(".json_encode($result_array).")";		
		
	}
	
	function getCoursesByLiveEventsDataForApp() {
	
		$vnames = getTermNamesForApp( 17 );
		//$result_array = array();
		$location_events = array();
		foreach( $vnames as $id => $vname)	
		{			
			$sql =  "SELECT n.nid,n.title,il.field_image_cdn_link_value,b.body_value,n.changed,ti.tid,td.name,d.field_event_date_value,d.field_event_date_value2 ".
					"FROM {node n} ".
					"LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid and n.vid = nr.vid ) ".
					"LEFT JOIN {field_data_field_image_cdn_link il} ON ( nr.nid = il.entity_id AND nr.vid = il.revision_id ) ".
					"LEFT JOIN {field_revision_body b} ON ( nr.nid = b.entity_id AND nr.vid = b.revision_id ) ".
					"LEFT JOIN {field_data_field_event_date d} ON ( nr.nid = d.entity_id AND nr.vid = d.revision_id ) ".
					"LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid ) ".
					"LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid) ".
					"WHERE n.status =1 ".
					"AND td.vid = 17 ".
					"AND td.name = '".$vname."' ".
					"AND n.type in ('live_events') ".
					"ORDER BY d.field_event_date_value ASC";
			
			$result = db_query( $sql );	
		
			//$location_events = array();
			foreach( $result as $record )	
			{
				$node = node_load($nid = $record->nid );
			
				if( sizeof($node->field_author) > 0 )
				{
					$comma_separated_author_names = "";
					$author_names = array();
					foreach( $node->field_author['und'] as $author )	
					{	
						$author = taxonomy_term_load( $author['tid'] );
						$author_names[] = $author->name; 
					}
					$comma_separated_author_names = implode( ", " , $author_names );
				}
				
				$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
				$title = $node->title;
				$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
				$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
				$teaser="";
				if( sizeof($node->body) > 0 ) $teaser  = get_clean_app_body( $node->body['und'][0]['value'] , 0 );
				if( sizeof($node->field_subtitle) > 0 ) $subtitle = $node->field_sub_title['und'][0]['value'];
				
				$oDate = new DateTime($record->field_event_date_value);
				//$sDate = $oDate->format('F jS, Y'); // Event Start Date
				$sDate = $oDate->getTimestamp(); // Event Start Date
								
				$oDate2 = new DateTime($record->field_event_date_value2);
				//$sDate2 = $oDate2->format('F jS, Y'); // Event End Date
				$sDate2 = $oDate2->getTimestamp();
				
				$events_agenda = array();
				$wrapper1 = entity_metadata_wrapper('node', $node);
				foreach ($wrapper1->field_agenda as $i)
				{
					$start_date = "";
					foreach ( $i->field_date_time->value() as $k => $v ) {
						//$start_date = date( 'F jS, Y g:i A' , strtotime($v) );
						$start_date = strtotime($v);
						break;
					}
					$events_agenda[] = array( "agenda_date" => $start_date , "agenda_item" => $i->field_agenda_item->value() );
				}
				
				$event_resources = array();
				$wrapper = entity_metadata_wrapper('node', $node);
				 foreach ($wrapper->field_lesson_resources as $i)
				 {
					$event_resources[] = array( "resource_link" => $i->field_file_link->value() , "resource_description" => $i->field_file_description->value() );
				 }
				
				$location_events[] = array( 'event_id' => $node->nid,
										   'title' => $title ,
										   'subtitle' => $subtitle,									  									  
										   'image' => $node->field_image_cdn_link['und'][0]['value'] ,									  		
										   'description' => $teaser,
										   'authors' => $comma_separated_author_names ,
										   'authors_array' => $author_names ,
										   'membership' => $membership->name,
										   'web_path' => $path ,					  
										   'created' => $node->created,
										   'modified' => $node->changed,
										   'event_start_date' => $sDate,
										   'event_end_date' => $sDate2,
										   'events_agenda' => $events_agenda,
										   'event_resources' => $event_resources,
										   'location address' =>	$node->field_location_address['und'][0]['value'],
										   'location city' => $node->field_location_city['und'][0]['value'],
										   'location zip code' => $node->field_location_zipcode['und'][0]['value'],
										   'location country' =>	$node->field_location_country['und'][0]['value']
										);
			}
			//$result_array[$vname] = array( "location_name" => $vname , "location_events" => $location_events );	
			//$result_array[] = array( "location_events" => $location_events );	
		}	
		//header('Content-type: application/json');
		set_mycustom_api_headers();
		echo json_encode( array( "location_events" => $location_events ) );
	}
	
	function getRecommendedLessosnsAppData( $month = 0 , $week = 0 ) {
	
		if( $month == 1 )
		{
			$sql = "SELECT *
					FROM {node n}
					LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
					LEFT JOIN {field_data_field_recommened_for_month rm} ON ( rm.entity_id = nr.nid AND rm.revision_id = nr.vid )
					WHERE n.status =1 AND n.type = 'lesson'
					AND rm.field_recommened_for_month_value = 0
					ORDER BY n.created DESC";
		}	

		if( $week == 1 )
		{
			$first_day_of_week     = date('Y-m-d',strtotime('sunday last week'));
			$last_day_of_week      = date('Y-m-d',strtotime('saturday this week'));
			
			$sql = "SELECT *
					FROM {node n}
					LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
					JOIN {field_revision_field_recommended_date rd} ON ( rd.entity_id = nr.nid AND rd.revision_id = nr.vid )
					WHERE n.status =1 
					AND n.type = 'lesson'
					AND field_recommended_date_value BETWEEN '".$first_day_of_week."' AND '".$last_day_of_week."'
					ORDER BY n.created DESC";
		}		
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			$node = node_load($nid = $record->nid );			
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			
			// added by rohan
			
				$author_names = array();
				if( sizeof($node->field_author) > 0 )
				{
					foreach( $node->field_author['und'] as $author )	
					{	
						$author = taxonomy_term_load( $author['tid'] );
						$author_names[] = $author->name; 
					}
					$comma_separated_author_names = implode( ", " , $author_names );
				}
				
				$comma_separated_add_author_names = "";
				$additional_author_names = array();
				if( sizeof($node->field_additiona_authors) > 0 )
				{
					foreach( $node->field_additiona_authors['und'] as $add_author )	
					{	
						$add_author = taxonomy_term_load( $add_author['tid'] );
						$additional_author_names[] = $add_author->name; 
					}
					$comma_separated_add_author_names = implode( ", " , $additional_author_names );
				}
				
				$comma_separated_add_author_names = "";
				$additional_author_names = array();
				if( sizeof($node->field_additiona_authors) > 0 )
				{
					foreach( $node->field_additiona_authors['und'] as $add_author )	
					{	
						$add_author = taxonomy_term_load( $add_author['tid'] );
						$additional_author_names[] = $add_author->name; 
					}
					$comma_separated_add_author_names = implode( ", " , $additional_author_names );
				}
				
				$vocab_terms = _taxonomy_node_get_terms_by_vocabulary($node, 14 );
				foreach( $vocab_terms as $t )	{	$primary_topic = $t->name; }
				
				$secondary_topics = array();
				$vocab_terms1 = _taxonomy_node_get_terms_by_vocabulary($node, 13 );
				foreach( $vocab_terms1 as $t )	{	$secondary_topics[] = $t->name; }
				
				if( $record->field_event_date_value == NULL )
				{
					$sDate = "";
				} 
				else
				{
					$oDate = new DateTime($record->field_event_date_value);
					$sDate = $oDate->getTimestamp(); // Event Start Date
				}
				
				if( $record->field_event_date_value2 == NULL )
				{
					$sDate2 = "";
				} 
				else
				{
					$oDate2 = new DateTime($record->field_event_date_value2);
					$sDate2 = $oDate2->getTimestamp();
				}
			
			// added by rohan
			
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = getCleanBody( $node->body['und'][0]['value'] , 100 );
			
			$recommended_date = $node->field_recommended_date['und'][0]['value'];
			$recommended_date_month = date('m',strtotime($recommended_date));
			$recommended_date_year = date('Y',strtotime($recommended_date));
			
			$media_type = taxonomy_term_load($node->field_type_of_lesson['und'][0]['tid']);
			
			if( $media_type->name == 'Video' ) 
			{
				$image_link = "http://twistassets.kabbalah.com/videos/".$node->field_lesson_video['und'][0]['twistage_existing_videos']."/screenshots/300w.jpg";
			} 
			else
			{
				$course_nid= node_load( $nid = $node->field_course_list['und'][0]['nid'] );
				if(!$course_nid) $course_nid = node_load( $nid = $node->field_event_list['und'][0]['nid'] );
				
				$image_link = $course_nid->field_image_cdn_link['und'][0]['value'];	
			}
			
			$recorded_date = strtotime($node->field_recorded_date['und'][0]['value']);
			if( $recorded_date == "" ) $recorded_date = $node->changed;
			
			
			
			if( $month == 1)
			{
				if( $recommended_date_month == date('m',time()) && $recommended_date_year == date('Y',time()) )
				{
					$result_array[] = array(  'node_type' => $node->type,
											  'title' => $title , 
											  'author' => $author->name ,
											  'path' => $path , 
											  'teaser' => $teaser,		
											  'membership' => $membership->name,
											  'image' => $image_link,											  
											  'media_type' => $media_type->name,
											  'authors_array' => $author_names ,
											  'additional_authors' => $comma_separated_add_author_names ,	
											  'additional_authors_array' => $additional_author_names ,	
											  'primary_topic' => $primary_topic,
											  'recommended_date_month' => $recommended_date_month,
											  'recommended_date_year' => $recommended_date_year,
											  'secondary_topics' => implode( ", " , $secondary_topics ),					
											  'secondary_topics_array' => $secondary_topics,					
											  'web_path' => $path ,					  
											  'created' => $node->created,
											  'modified' => $node->changed,
											  'event_start_date' => $sDate,
											  'event_end_date' => $sDate2 
											);
				}
			}

			if( $week == 1)
			{
					$result_array[] = array(  'node_type' => $node->type,
											  'title' => $title , 
											  'author' => $author->name ,
											  'path' => $path , 
											  'teaser' => $teaser,		
											  'membership' => $membership->name,
											  'image' => $image_link,											  
											  'media_type' => $media_type->name ,
											  'authors_array' => $author_names ,
											  'additional_authors' => $comma_separated_add_author_names ,	
											  'additional_authors_array' => $additional_author_names ,	
											  'primary_topic' => $primary_topic,
											  'recommended_date' => strtotime($recommended_date),
											  'secondary_topics' => implode( ", " , $secondary_topics ),					
											  'secondary_topics_array' => $secondary_topics,					
											  'web_path' => $path ,					  
											  'created' => $node->created,
											  'modified' => $node->changed,
											  'event_start_date' => $sDate,
											  'event_end_date' => $sDate2
											);
			}
	
		}
		
		//header('Content-type: application/json');
		set_mycustom_api_headers();
		echo json_encode( $result_array );				
	
	
	}
	
	function set_mycustom_api_headers()	{
	  drupal_add_http_header('Content-Type', 'application/json');
	  //drupal_add_http_header('Access-Control-Allow-Origin', "*");
	  //drupal_add_http_header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE');
	}

	// End of App Apis
	
	function json_encode_unicode_for_app($data) {
		return preg_replace_callback('/(?<!\\\\)\\\\u([0-9a-f]{4})/i',
		function ($m) {
		$d = pack("H*", $m[1]);
		$r = mb_convert_encoding($d, "UTF8", "UTF-16BE");
		return $r!=="?" && $r!=="" ? $r : $m[0];
		}, json_encode($data)
		);
	}
		
	function getTermNamesForApp( $vid )	{
	
		$topics =  taxonomy_get_tree( $vid ); 
		$vnames = array();
		foreach( $topics as $t ) {
			$vnames[$t->tid] = $t->name;
		}
		return $vnames;
	}
		
	function get_clean_app_body( $body , $limit = 100 ) { // $limit = 0 means no limit
	
		/*$body = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $body);
		$body = preg_replace('#<object(.*?)>(.*?)</object>#is', '', $body);
		$teaser = preg_replace('#<img(.*?)>#is', '', $body);
		$teaser = preg_replace("/&#?[a-z0-9]+;/i","",$teaser); // removeds $nbsp
		$teaser = stripslashes($teaser);
		$teaser = strip_tags($teaser);*/

		if( $limit != 0 )$body = substr( $body , 0 , $limit );
		if( $body != false ) return $body;
		else return "";
	
	}