<?php
		
	// List of API's used on ukabbalah.com website
	
	function kabbalah_apis_menu() {
		
		// new hook created
		$items['k_api/slds'] = array(
			'page callback'      => 'getSlideshowApiData',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		// new hook created
		$items['k_api/bgnr_crs'] = array(               // Made this a PAGE
			'page callback'      => 'getBeginnersCourses',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		// new hook created
		$items['k_api/recently_added_lsns'] = array(              
			'page callback'      => 'getRecentlyAddedLessonsJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		// Profile Dashboard API's
		
		$items['k_api/recently_added_lsns_by_mbshp/%'] = array(              
			'page callback'      => 'getRecentlyAddedLessonsByMembershipJson',
			'page arguments' => array(2),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		$items['k_api/recently_added_crs_by_mbshp/%'] = array(              
			'page callback'      => 'getRecentlyAddedCoursesByMembershipJson',
			'page arguments' => array(2),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		$items['k_api/dshbrd_live_evnts'] = array(              
			'page callback'      => 'getLiveEventsJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		// End of Profile Dashboard API's
		
		
		$items['k_api/recently_added_crs'] = array(              
			'page callback'      => 'getRecentlyAddedCoursesJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		// App API's
		
		// $items['k_app_api/all_courses'] = array(              
			// 'page callback'      => 'getCoursesJsonForApp',
			// 'access callback' => TRUE,
			// 'type'             => MENU_CALLBACK,
		// );
		
		// $items['k_app_api/lsns_by_crs_id/%'] = array(              
			// 'page callback'      => 'getLessonsByCourseIdJsonForApp',
			// 'page arguments' => array(2),
			// 'access callback' => TRUE,
			// 'type'             => MENU_CALLBACK,
		// );
		
		// End of App API's
		
		
		$items['k_api/recommended_lsns/%/%'] = array(               // Made this a PAGE
			'page callback'      => 'getRecommendedLessonsJson',
			'page arguments' => array(2,3),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		$items['k_api/free_lsns'] = array(               // Made this a PAGE
			'page callback'      => 'getFreeLessonsJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		$items['k_api/crs'] = array(               // Made this a PAGE
			'page callback'      => 'getCoursesJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		$items['k_api/tchrs'] = array(               // Made this a PAGE
			'page callback'      => 'getTeachersJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		$items['k_api/onl_dmd_evts'] = array(               // Made this a PAGE
			'page callback'      => 'getOnlineTopicsJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		$items['k_api/lngs'] = array(               // Made this a PAGE
			'page callback'      => 'getCoursesByLanguageJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		$items['k_api/live_evnts'] = array(               // Made this a PAGE
			'page callback'      => 'getCoursesByLiveEventsJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		
		$items['k_search_api/art/%'] = array(               // Made this a PAGE
			'page callback'      => 'getSearchArticlesJson',
			'page arguments' => array(2),
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		$items['k_api/get_video_courses'] = array(       // Mapped from /get_articles
			'page callback'      => 'getVideoCoursesInfoJson',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		$items['k_api/get_video_lesson_by_course'] = array(       // Mapped from /get_articles
			'page callback'      => 'getVideoLessonByCourseId',
			'access callback' => TRUE,
			'type'             => MENU_CALLBACK,
		);
		
		return $items;
	  }
	  
	function getSearchArticlesJson( $keyword ) {
	
		$sql =  "SELECT n.nid,n.type,n.title,il.field_image_cdn_link_value,lv.field_lesson_video_twistage_existing_videos,b.body_value,n.changed,ti.tid,td.name".
				" FROM {node} n".
				" LEFT JOIN {node_revision} nr ON ( n.nid = nr.nid and n.vid = nr.vid )".
				" LEFT JOIN {field_data_field_image_cdn_link} il ON ( nr.nid = il.entity_id AND nr.vid = il.revision_id )".
				" LEFT JOIN {field_data_field_lesson_video} lv ON ( nr.nid = lv.entity_id AND nr.vid = lv.revision_id )".
				" LEFT JOIN {field_revision_body} b ON ( nr.nid = b.entity_id AND nr.vid = b.revision_id )".
				" LEFT JOIN {taxonomy_index} ti ON( nr.nid = ti.nid )".
				" LEFT JOIN {taxonomy_term_data} td ON( ti.tid = td.tid)".
				" WHERE n.status =1".
				" and td.vid IN (7,13)".
				" and ( td.name like '%".$keyword."%'".
				" OR n.title like '%".$keyword."%'".
				" OR b.body_value like '%".$keyword."%' )". 
				" and n.type IN('lesson','course')". 
				" order by n.type , td.vid , n.changed desc";
		
		$result = db_query( $sql);
		$result_arr = getQueryResults( $result );
		echo json_encode( $result_arr);
	} 
	
	function getQueryResults( $result ) {
	
		$result_arr = array();
		foreach ($result as $record) {	
			$title = $record->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$title = str_replace(array('&'), array('and'), $title);
			$teaser  = get_clean_body( $record->body_value , 150 );
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));	
			if( $record->type == "course") {
				$thumbnail = $record->field_image_cdn_link_value;
			} else {
				$thumbnail = 'http://twistassets.kabbalah.com/videos/'.$record->field_lesson_video_twistage_existing_videos.'/screenshots/350w.jpg';
			}
			
			$node = node_load($record->nid , NULL, TRUE);
			$author_name = array();
			$vocab_terms1 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
			foreach( $vocab_terms1 as $t )	{	$author_name[] = $t->name; }
		
			$secondary_topics = array();
			$vocab_terms2 = _taxonomy_node_get_terms_by_vocabulary($node, 13 );
			foreach( $vocab_terms2 as $t )	{	$secondary_topics[] = $t->name; }
			
			$vocab_terms3 = _taxonomy_node_get_terms_by_vocabulary($node, 12 );
			foreach( $vocab_terms3 as $t )	{	$membership = $t->name; }
			
			$result_arr[ $record->nid  ]=  array(
								  "node_type" => $record->type ,
								  "title"=> $title ,		
								  "teaser" => $teaser , 
								  "date" => date( 'F jS, Y',$record->changed ),
								  "thumbnail" => $thumbnail , 
								  "path" => $path , 
								  "author" => implode( "," , $author_name ), 
								  "membership" => $membership,
								  "keywords" => implode( "," , $secondary_topics )
							);	
		}
		return $result_arr;
	}
	
	function getSlideshowApiData() {
	
		$sql = 	"SELECT n.nid,n.title,n.changed,il.field_event_image_cdn_link_value,b.body_value,plv.field_event_path_link_value,st.field_sub_title_value,cs.field_color_selector_value,dso.field_display_order_value ".
				"FROM node n ".
				"LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid and n.vid = nr.vid ) ".
				"LEFT JOIN {field_revision_field_event_image_cdn_link il} ON ( nr.nid = il.entity_id AND nr.vid = il.revision_id ) ".
				"LEFT JOIN {field_revision_body b} ON ( nr.nid = b.entity_id AND nr.vid = b.revision_id ) ".
				"LEFT JOIN {field_revision_field_event_path_link plv} ON ( nr.nid = plv.entity_id AND nr.vid = plv.revision_id ) ".
				"LEFT JOIN {field_revision_field_sub_title st} ON ( nr.nid = st.entity_id AND nr.vid = st.revision_id ) ".
				"LEFT JOIN {field_revision_field_color_selector cs} ON ( nr.nid = cs.entity_id AND nr.vid = cs.revision_id ) ".
				"LEFT JOIN {field_revision_field_display_order dso} ON ( nr.nid = dso.entity_id AND nr.vid = dso.revision_id ) ".
				"WHERE n.status =1 ".
				"AND n.type = 'slideshow' ".
				"ORDER BY dso.field_display_order_value ASC,n.changed DESC";
	
		$result = db_query( $sql );
	
		$result_array = array();
			
		foreach ($result as $record) 
		{
			$path = $record->field_event_path_link_value;
			$title = $record->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$subtitle = $record->field_sub_title_value;
			$subtitle = preg_replace("/&#?[a-z0-9]+;/i","",$subtitle); // removes $nbsp
			$teaser  = get_clean_body( $record->body_value , 0 );
			$result_array[] = array(  'path' => $path , 
									  'title' => $title , 
									  'subtitle' => $subtitle ,
									  'teaser' => $teaser,		
									  'field_color_selector_value' => $record->field_color_selector_value , 
									  'field_image_link_value' => $record->field_event_image_cdn_link_value );	
		}
		echo json_encode( $result_array );	
	}
	
	function getBeginnersCourses() {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {field_revision_field_beginner_course_ bc} ON ( bc.entity_id = nr.nid AND bc.revision_id = nr.vid )
				WHERE n.status =1
				AND n.type = 'course'
				AND bc.field_beginner_course__value = 1
				ORDER BY n.changed DESC limit 10";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			$node = node_load($nid = $record->nid  );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			
			if( sizeof($node->field_this_course_contains) > 0 )
			{
				if( $node->field_this_course_contains['und'][0]['value'] == 1 ) $media_type = 'audioImg';
				else if( $node->field_this_course_contains['und'][0]['value'] == 0 ) $media_type = 'vidImg';
				else $media_type = 'bothAdVdImg';
			} else {

				$media_type = 'bothAdVdImg';
			}
			$result_array[] = array(  'node_type' => $node->type,
									  'title' => $title , 
									  'author' => $author->name ,
									  'path' => $path , 
									  'teaser' => $teaser,		
									  'membership' => $membership->name,
									  'image' => $node->field_image_cdn_link['und'][0]['value'] ,
									  'created' => date('F jS, Y',$node->created),
									  'media_type' => $media_type
								    );	
		}
		echo json_encode( $result_array );				
	}
	
	function getBeginnersCoursesForCoursesPage() {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {field_revision_field_beginner_course_ bc} ON ( bc.entity_id = nr.nid AND bc.revision_id = nr.vid )
				LEFT JOIN {field_data_field_course_language cl} ON ( nr.nid = cl.entity_id AND nr.vid = cl.revision_id )
				WHERE n.status =1
				AND n.type = 'course'
				AND bc.field_beginner_course__value = 1
				AND cl.field_course_language_tid IS NULL
				ORDER BY n.changed DESC limit 10";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			$node = node_load($nid = $record->nid );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			if( sizeof($node->field_this_course_contains) > 0 )
			{
				if( $node->field_this_course_contains['und'][0]['value'] == 1 ) $media_type = 'audioImg';
				else if( $node->field_this_course_contains['und'][0]['value'] == 0 ) $media_type = 'vidImg';
				else $media_type = 'bothAdVdImg';
			} else {

				$media_type = 'bothAdVdImg';
			}
			$result_array[] = array(  'title' => $title , 
									  'image_link' => $node->field_image_cdn_link['und'][0]['value'] ,
									  'path' => $path ,
									  'teaser' => $teaser,		
									  'author' => $author->name ,
									  'date_created' => date('F jS, Y',$node->created),
									  'membership' => $membership->name,
									  'media_type' => $media_type
								    );	
		}
		return $result_array;				
	}

	function getRecentlyAddedLessonsJson() {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				WHERE n.status =1
				AND n.type = 'lesson'
				ORDER BY n.created DESC LIMIT 6";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			
			$node = node_load($nid = $record->nid  );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			$media_type = taxonomy_term_load($node->field_type_of_lesson['und'][0]['tid']);
			
			$recorded_date = strtotime($node->field_recorded_date['und'][0]['value']);
			if( $recorded_date == "" ) $recorded_date = $node->created;
			
			if( $media_type->name == 'Video' ) 
			{
				$image_link = "http://twistassets.kabbalah.com/videos/".$node->field_lesson_video['und'][0]['twistage_existing_videos']."/screenshots/620w.jpg";
			} 
			else
			{
				$course_nid= node_load( $nid = $node->field_course_list['und'][0]['nid'] );
				if(!$course_nid) $course_nid = node_load( $nid = $node->field_event_list['und'][0]['nid'] );
				$image_link = $course_nid->field_image_cdn_link['und'][0]['value'];	
			}
			
			$result_array[] = array(  'node_type' => $node->type,
									  'title' => $title , 
									  'author' => $author->name ,
									  'path' => $path , 
									  'teaser' => $teaser,		
									  'membership' => $membership->name,
									  'image' => $image_link,
									  'created' => date('F jS, Y',$recorded_date),
									  'media_type' => $media_type->name
									);
		}
		echo json_encode( $result_array );				

	}
	
	// Profile Dashboard API's
	function getRecentlyAddedLessonsByMembershipJson( $membership ) {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid )
				LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid)
				WHERE n.status =1
				AND td.vid = 12";
		
		if( $membership == "Free" )       	$sql .=	" AND td.name IN('Free')";
		if( $membership == "Basic" )        $sql .= " AND td.name IN('Free','Basic')";
		if( $membership == "Premium" ) 		$sql .=	" AND td.name IN('Free','Basic','Premium')";
		if( $membership == "Premium Plus" ) $sql .=	" AND td.name IN('Free','Basic','Premium','Premium Plus')";
		
		$sql .=	" AND n.type = 'lesson'
				 ORDER BY n.changed DESC LIMIT 10";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			
			$node = node_load($nid = $record->nid  );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership_term = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			$media_type = taxonomy_term_load($node->field_type_of_lesson['und'][0]['tid']);
			
			$result_array[] = array(  'node_type' => $node->type,
									  'title' => $title , 
									  'author' => $author->name ,
									  'path' => $path , 
									  'teaser' => $teaser,		
									  'membership' => $membership_term->name,
									  'image' => 'http://twistassets.kabbalah.com/videos/'.$node->field_lesson_video['und'][0]['twistage_existing_videos'].'/screenshots/300w.jpg' ,
									  'created' => date('F jS, Y',$node->changed),
									  'media_type' => $media_type->name
									);
								
		}
		echo json_encode( $result_array );
		
	}
	
	function getRecentlyAddedCoursesByMembershipJson( $membership ) {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid )
				LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid)
				WHERE n.status =1
				AND td.vid = 12";

		if( $membership == "Free" )       	$sql .=	" AND td.name IN('Free')";
		if( $membership == "Basic" )        $sql .= " AND td.name IN('Free','Basic')";
		if( $membership == "Premium" ) 		$sql .=	" AND td.name IN('Free','Basic','Premium')";
		if( $membership == "Premium Plus" ) $sql .=	" AND td.name IN('Free','Basic','Premium','Premium Plus')";
		
		$sql .=	" AND n.type = 'course'
				 ORDER BY n.changed DESC LIMIT 10";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{	
			$node = node_load($nid = $record->nid );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			
			if( sizeof($node->field_this_course_contains) > 0 )
			{
				if( $node->field_this_course_contains['und'][0]['value'] == 1 ) $media_type = 'audioImg';
				else if( $node->field_this_course_contains['und'][0]['value'] == 0 ) $media_type = 'vidImg';
				else $media_type = 'bothAdVdImg';
			} else {

				$media_type = 'bothAdVdImg';
			}
			
			
			$result_array[] = array(  'node_type' => $node->type,
									  'title' => $title , 
									  'author' => $author->name ,
									  'path' => $path , 
									  'teaser' => $teaser,		
									  'membership' => $membership->name,
									  'image' => $node->field_image_cdn_link['und'][0]['value'] ,
									  'created' => date('F jS, Y',$node->changed),
									  'media_type' => $media_type
									);
		}
		echo json_encode( $result_array );				
	}
	
	function getLiveEventsJson() {
	
		$result_array = array();				
		
		$sql =  "SELECT n.nid,n.title,il.field_image_cdn_link_value,b.body_value,n.changed,d.field_event_date_value,d.field_event_date_value2 ".
				"FROM {node n} ".
				"LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid and n.vid = nr.vid ) ".
				"LEFT JOIN {field_data_field_image_cdn_link il} ON ( nr.nid = il.entity_id AND nr.vid = il.revision_id ) ".
				"LEFT JOIN {field_revision_body b} ON ( nr.nid = b.entity_id AND nr.vid = b.revision_id ) ".
				"LEFT JOIN {field_data_field_event_date d} ON ( nr.nid = d.entity_id AND nr.vid = d.revision_id ) ".
				"WHERE n.status =1 ".
				"AND n.type in ('live_events') ".
				"ORDER BY d.field_event_date_value ASC";
		
		$result = db_query( $sql );	
		foreach( $result as $record )	
		{
				$title = $record->title;
				$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
				$teaser  = get_clean_body( $record->body_value , 100 );
				$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));	
				$node = node_load($record->nid , NULL, TRUE);
				$image_link = $record->field_image_cdn_link_value;
				
				$oDate = new DateTime($record->field_event_date_value);
				$sDate = $oDate->format('F jS, Y'); // Event Start Date
				
				$oDate2 = new DateTime($record->field_event_date_value2);
				$sDate2 = $oDate2->format('F jS, Y'); // Event End Date
				
				$vocab_terms5 = _taxonomy_node_get_terms_by_vocabulary($node, 12 );
				foreach( $vocab_terms5 as $t )	{	$membership = $t->name; }
			
				
				$vocab_terms3 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
				foreach( $vocab_terms3 as $t )	{	$author_name = $t->name; }
				
				$vocab_terms4 = _taxonomy_node_get_terms_by_vocabulary($node, 17 );
				foreach( $vocab_terms4 as $t )	{	$location_name = $t->name; }

				$result_array[] = array(  'title' => $title , 
											'image_link' => $image_link ,
											'path' => $path , 
											'teaser' => $teaser , 
											'author' => $author_name , 
											'date_created' => $sDate ,
											'membership' => $membership,
											'location' => $location_name
										  );							  	
		}
	
		echo json_encode( $result_array );
	}
	
	// End of Profile Dashboard API's
	
	function getRecentlyAddedCoursesJson() {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				WHERE n.status =1
				AND n.type = 'course'
				ORDER BY n.created DESC LIMIT 6";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{	
			$node = node_load($nid = $record->nid );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			
			if( sizeof($node->field_this_course_contains) > 0 )
			{
				if( $node->field_this_course_contains['und'][0]['value'] == 1 ) $media_type = 'audioImg';
				else if( $node->field_this_course_contains['und'][0]['value'] == 0 ) $media_type = 'vidImg';
				else $media_type = 'bothAdVdImg';
			} else {

				$media_type = 'bothAdVdImg';
			}
			
			
			$result_array[] = array(  'node_type' => $node->type,
									  'title' => $title , 
									  'author' => $author->name ,
									  'path' => $path , 
									  'teaser' => $teaser,		
									  'membership' => $membership->name,
									  'image' => $node->field_image_cdn_link['und'][0]['value'] ,
									  'created' => date('F jS, Y',$node->created),
									  'media_type' => $media_type
									);
		}
		echo json_encode( $result_array );				
	}
		
	function getRecommendedLessonsJson( $month = 0 , $week = 0 ) {
	
		if( $month == 1 )
		{
			$sql = "SELECT *
					FROM {node n}
					LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
					LEFT JOIN {field_data_field_recommened_for_month rm} ON ( rm.entity_id = nr.nid AND rm.revision_id = nr.vid )
					WHERE n.status =1 AND n.type = 'lesson'
					AND rm.field_recommened_for_month_value = 0
					ORDER BY n.created DESC";
		}	

		if( $week == 1 )
		{
			$first_day_of_week     = date('Y-m-d',strtotime('sunday last week'));
			$last_day_of_week      = date('Y-m-d',strtotime('saturday this week'));
			
			$sql = "SELECT *
					FROM {node n}
					LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
					JOIN {field_revision_field_recommended_date rd} ON ( rd.entity_id = nr.nid AND rd.revision_id = nr.vid )
					WHERE n.status =1 
					AND n.type = 'lesson'
					AND field_recommended_date_value BETWEEN '".$first_day_of_week."' AND '".$last_day_of_week."'
					ORDER BY n.created DESC";
		}		
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			
			$node = node_load($nid = $record->nid );
						
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
			
			$recommended_date = $node->field_recommended_date['und'][0]['value'];
			$recommended_date_month = date('m',strtotime($recommended_date));
			$recommended_date_year = date('Y',strtotime($recommended_date));
			
			$media_type = taxonomy_term_load($node->field_type_of_lesson['und'][0]['tid']);
			
			if( $media_type->name == 'Video' ) 
			{
				$image_link = "http://twistassets.kabbalah.com/videos/".$node->field_lesson_video['und'][0]['twistage_existing_videos']."/screenshots/300w.jpg";
			} 
			else
			{
				$course_nid= node_load( $nid = $node->field_course_list['und'][0]['nid'] );
				if(!$course_nid) $course_nid = node_load( $nid = $node->field_event_list['und'][0]['nid'] );
				
				$image_link = $course_nid->field_image_cdn_link['und'][0]['value'];	
			}
			
			$recorded_date = strtotime($node->field_recorded_date['und'][0]['value']);
			if( $recorded_date == "" ) $recorded_date = $node->changed;
			
			
			
			if( $month == 1)
			{
				if( $recommended_date_month == date('m',time()) && $recommended_date_year == date('Y',time()) )
				{
					$result_array[] = array(  'node_type' => $node->type,
											  'title' => $title , 
											  'author' => $author->name ,
											  'path' => $path , 
											  'teaser' => $teaser,		
											  'membership' => $membership->name,
											  'image' => $image_link,
											  'created' => date('F jS, Y',$recorded_date),
											  'media_type' => $media_type->name
											);
				}
			}

			if( $week == 1)
			{
					$result_array[] = array(  'node_type' => $node->type,
											  'title' => $title , 
											  'author' => $author->name ,
											  'path' => $path , 
											  'teaser' => $teaser,		
											  'membership' => $membership->name,
											  'image' => $image_link,
											  'created' => date('F jS, Y',$recorded_date),
											  'media_type' => $media_type->name
											);
			}
	
		}
		echo json_encode( $result_array );				
	
	
	}
	
	function getFreeLessonsJson() {
	
		$sql = "SELECT *
				FROM {node n}
				LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
				LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid )
				LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid)
				WHERE n.status =1
				AND n.type = 'lesson'
				AND td.vid = 12
				AND td.name = 'Free'
				ORDER BY n.changed DESC LIMIT 6";
				
		$result = db_query( $sql );
		$result_array = array();
		foreach ($result as $record) 
		{
			
			$node = node_load( $nid = $record->nid );
			$author = taxonomy_term_load($node->field_author['und'][0]['tid']);
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
			$teaser="";
			if( sizeof($node->body) > 0 ) $teaser  = get_clean_body( $node->body['und'][0]['value'] , 100 );
		
			if( sizeof($node->field_type_of_lesson) > 0 ) 
			{
				$media_type1 = taxonomy_term_load($node->field_type_of_lesson['und'][0]['tid']);
				$media_type = $media_type1->name;
			} else {

				$media_type = 'bothAdVdImg';
			}
			
			$recorded_date = strtotime($node->field_recorded_date['und'][0]['value']);
			if( $recorded_date == "" ) $recorded_date = $node->changed;
			
			if( $media_type1->name == 'Video' ) 
			{
				$image_link = "http://twistassets.kabbalah.com/videos/".$node->field_lesson_video['und'][0]['twistage_existing_videos']."/screenshots/300w.jpg";
			} 
			else
			{
				$course_nid= node_load( $nid = $node->field_course_list['und'][0]['nid'] );
				if(!$course_nid) $course_nid = node_load( $nid = $node->field_event_list['und'][0]['nid'] );
				$image_link = $course_nid->field_image_cdn_link['und'][0]['value'];	
			}
			
			
			$result_array[] = array(  'node_type' => $node->type,
										  'title' => $title , 
										  'author' => $author->name ,
										  'path' => $path , 
										  'teaser' => $teaser,		
										  'membership' => $membership->name,
										  'image' => $image_link,
										  'created' => date('F jS, Y',$recorded_date),
										  'media_type' => $media_type
										);							
										
		}
		echo json_encode( $result_array );				
	
	
	}

// Page Data Apis ( Courses , Teachers , Online Demand Events , Other Languages)
	
	function getCoursesJson() {
	
		$vnames = getTermNames( 14 );
		$result_array = array();
		$resultHTML = "";
		$counter = 1;
		$beginners_courses = getBeginnersCoursesForCoursesPage();
		$result_array['Beginners Courses'] = array( "term_name" => 'Beginner\'s Courses' , "term_desc" => 'If you are new to the teachings of The Kabbalah Centre, start here' , "term_articles" => $beginners_courses );
		foreach( $vnames as $id => $vname)	
		{			
			$result = runPageQuery( 14 , $vname , 562 ); // Basic Course : 562
			$vname_articles = array();
			$vname_articles	= processPageQueryResults( $result , 14 ) ; 
			$result_array[$vname] = array( "term_name" => $vname , "term_desc" =>  $vname_articles['term_description'] , "term_articles" => $vname_articles['articles'] );	
		}	
		echo json_encode( $result_array );
	}
		
	function getTeachersJson() {
	
		$vnames = getTermNames( 7 );
		$result_array = array();
		foreach( $vnames as $id => $vname)	{
					
			$result = runPageQuery( 7 , $vname , 562 ); // Basic Course : 562
			foreach( $result as $record ) {
			
				$title = $record->title;
				$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
				$teaser  = get_clean_body( $record->body_value , 100 );
				$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));	
				
				$node = node_load($record->nid , NULL, TRUE);
				$vocab_terms3 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
				foreach( $vocab_terms3 as $t )	{	$author_name = $t->name; }
				
				$vocab_terms4 = _taxonomy_node_get_terms_by_vocabulary($node, 14 );
				foreach( $vocab_terms4 as $t )	{	$primary_topic = $t->name; }

				if( $node->type == "course" ) {
				
					if( sizeof($node->field_lesson_group) > 0 )	{
					
						$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
						$membership = $membership->name;
					}
				}
				
				if( $node->type == "course" ) {
				
					if( sizeof($node->field_this_course_contains) > 0 )  {
					
						if( $node->field_this_course_contains['und'][0]['value'] == 1 ) $media_type = 'audioImg';
						else if( $node->field_this_course_contains['und'][0]['value'] == 0 ) $media_type = 'vidImg';
						else $media_type = 'bothAdVdImg';
					} else {

						$media_type = 'bothAdVdImg';
					}
				}
				
				$result_array[$vname][] = array( 'title' => $title , 
												 'image_link' => $record->field_image_cdn_link_value ,
												 'path' => $path , 
												 'teaser' => $teaser , 
												 'author' => $author_name , 
												 'date_created' => date( 'F jS, Y',$record->changed ),
												 'primary_topic' => $primary_topic ,
												 'membership' => $membership,
												 'media_type' => $media_type												 
										  ); 
			}
		}	
		echo json_encode( $result_array );
	}
	
	function getOnlineTopicsJson() {
	
		$vnames = getTermNames( 10 );
		$result_array = array();
		foreach( $vnames as $id => $vname)	{
					
			$result = runPageQuery( 10 , $vname , 563 ); // On Demand Event : 563
			$vname_articles = array();
			$vname_articles	= processPageQueryResults( $result , 10 ) ; 
			$result_array[$vname] = array( "term_name" => $vname , "term_desc" =>  $vname_articles['term_description'] , "term_articles" => $vname_articles['articles'] );
		}	
		echo json_encode( $result_array );
		
	}

	function getCoursesByLanguageJson() {
	
		$vnames = getTermNames( 16 );
		$result_array = array();
		foreach( $vnames as $id => $vname)	{
					
			$result = runPageQuery( 16 , $vname , 562 ); // Basic Course : 562
			$vname_articles = array();
			$vname_articles	= processPageQueryResults( $result , 16 ) ; 
			$result_array[$vname] = array( "term_name" => $vname , "term_desc" =>  $vname_articles['term_description'] , "term_articles" => $vname_articles['articles'] );
		}	
		echo json_encode( $result_array );
	}
	
	function getCoursesByLiveEventsJson() {
	
		$vnames = getTermNames( 17 );
		$result_array = array();
		foreach( $vnames as $id => $vname)	{
					
			$sql =  "SELECT n.nid,n.title,il.field_image_cdn_link_value,b.body_value,n.changed,ti.tid,td.name,d.field_event_date_value,d.field_event_date_value2 ".
					"FROM {node n} ".
					"LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid and n.vid = nr.vid ) ".
					"LEFT JOIN {field_data_field_image_cdn_link il} ON ( nr.nid = il.entity_id AND nr.vid = il.revision_id ) ".
					"LEFT JOIN {field_revision_body b} ON ( nr.nid = b.entity_id AND nr.vid = b.revision_id ) ".
					"LEFT JOIN {field_data_field_event_date d} ON ( nr.nid = d.entity_id AND nr.vid = d.revision_id ) ".
					"LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid ) ".
					"LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid) ".
					"WHERE n.status =1 ".
					"AND td.vid = 17 ".
					"AND td.name = '".$vname."' ".
					"AND n.type in ('live_events') ".
					"ORDER BY d.field_event_date_value ASC";
			
			$result = db_query( $sql );	
		
			$vname_articles = array();
			foreach( $result as $record )	{
	
					$title = $record->title;
					$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
					$teaser  = get_clean_body( $record->body_value , 100 );
					$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));	
					$node = node_load($record->nid , NULL, TRUE);
					$image_link = $record->field_image_cdn_link_value;
					
					$oDate = new DateTime($record->field_event_date_value);
					//$oDate->modify("-25200 second");
					$sDate = $oDate->format('F jS, Y'); // Event Start Date
					
					$oDate2 = new DateTime($record->field_event_date_value2);
					//$oDate2->modify("-25200 second");
					$sDate2 = $oDate2->format('F jS, Y'); // Event End Date
					
					$vocab_terms5 = _taxonomy_node_get_terms_by_vocabulary($node, 12 );
					foreach( $vocab_terms5 as $t )	{	$membership = $t->name; }
					
					$vocab_terms4 = _taxonomy_node_get_terms_by_vocabulary($node, $vid );
					foreach( $vocab_terms4 as $t )	{	$p_topic_description = $t->description; }
					
					$vocab_terms3 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
					foreach( $vocab_terms3 as $t )	{	$author_name = $t->name; }

					$vname_articles[] = array(  'title' => $title , 
												'image_link' => $image_link ,
												'path' => $path , 
												'teaser' => $teaser , 
												'author' => $author_name , 
												'date_created' => $sDate ,
												'membership' => $membership,
												//'media_type' => $media_type
											  );							  	
			}
			
			$result_array[$vname] = array( "term_name" => $vname , "term_desc" =>  $p_topic_description  , "term_articles" => $vname_articles );
			
		}	
		
		echo json_encode( $result_array );
	}
		
	function runPageQuery( $vid , $vname , $type_of_course_tid ) {
	
		$sql =  "SELECT n.nid,n.title,il.field_image_cdn_link_value,n.nid,b.body_value,n.changed,ti.tid,td.name ".
					"FROM {node n} ".
					"LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid and n.vid = nr.vid ) ".
					"LEFT JOIN {field_data_field_image_cdn_link il} ON ( nr.nid = il.entity_id AND nr.vid = il.revision_id ) ".
					"LEFT JOIN {field_revision_body b} ON ( nr.nid = b.entity_id AND nr.vid = b.revision_id ) ".
					"LEFT JOIN {field_revision_field_parent_course pc} ON ( nr.nid = pc.entity_id AND nr.vid = pc.revision_id ) ".
					"LEFT JOIN {field_data_field_type_of_course toc} ON ( nr.nid = toc.entity_id AND nr.vid = toc.revision_id ) ".
					"LEFT JOIN {field_data_field_course_language cl} ON ( nr.nid = cl.entity_id AND nr.vid = cl.revision_id ) ".
					"LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid ) ".
					"LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid) ".
					"WHERE n.status =1 ".
					"AND td.vid = ".$vid." ".
					"AND td.name = '".$vname."' ".
					"AND ( n.type in ('course','parent_course' ) AND pc.field_parent_course_nid IS NULL ";
					
		if( $vid != 16 ) $sql .= "AND cl.field_course_language_tid IS NULL ";		
		
		//if( $vid != 7 )  $sql .= "AND toc.field_type_of_course_tid = ".$type_of_course_tid.") ";
		
		if( $vid != 7 ) $sql .= "AND toc.field_type_of_course_tid = ".$type_of_course_tid."";
		$sql .=	") ORDER BY n.changed DESC";
		
		$result = db_query( $sql );
		return $result;
		
	}

	function processPageQueryResults( $result , $vid ) {
	
		$vname_articles = array();
		foreach( $result as $record )	{
	
			$title = $record->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$teaser  = get_clean_body( $record->body_value , 100 );
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));	
			$node = node_load($record->nid , NULL, TRUE);
			$image_link = $record->field_image_cdn_link_value;
			if( $node->type == "course" ) {
			
				if( sizeof($node->field_lesson_group) > 0 )	{
					$membership = taxonomy_term_load($node->field_lesson_group['und'][0]['tid']);
					$membership = $membership->name;
				}
			}

			$vocab_terms4 = _taxonomy_node_get_terms_by_vocabulary($node, $vid );
			foreach( $vocab_terms4 as $t )	{	$p_topic_description = $t->description; }
			
			$vocab_terms3 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
			foreach( $vocab_terms3 as $t )	{	$author_name = $t->name; }
			
			if( $node->type == "course" ) {
			
				if( sizeof($node->field_this_course_contains) > 0 )  {
				
					if( $node->field_this_course_contains['und'][0]['value'] == 1 ) $media_type = 'audioImg';
					else if( $node->field_this_course_contains['und'][0]['value'] == 0 ) $media_type = 'vidImg';
					else $media_type = 'bothAdVdImg';
				} else {

					$media_type = 'bothAdVdImg';
				}
			}

			$vname_articles[] = array(  'title' => $title , 
										'image_link' => $image_link ,
										'path' => $path , 
										'teaser' => $teaser , 
										'author' => $author_name , 
										'date_created' => date( 'F jS, Y',$record->changed ) ,
										'membership' => $membership,
										'media_type' => $media_type
									  );							  
		}
		return array( "articles" => $vname_articles , "term_description" => $p_topic_description );
	}
	
	function getTermNames( $vid )	{
	
		$topics =  taxonomy_get_tree( $vid ); 
		$vnames = array();
		foreach( $topics as $t ) {
			$vnames[$t->tid] = $t->name;
		}
		return $vnames;
	}
	
// End of Page Data Apis
	
	function get_clean_body( $body , $limit = 100 ) { // $limit = 0 means no limit
	
		$body = preg_replace('#<script(.*?)>(.*?)</script>#is', '', $body);
		$body = preg_replace('#<object(.*?)>(.*?)</object>#is', '', $body);
		$teaser = preg_replace('#<img(.*?)>#is', '', $body);
		$teaser = preg_replace("/&#?[a-z0-9]+;/i","",$teaser); // removeds $nbsp
		$teaser = stripslashes($teaser);
		$teaser = strip_tags($teaser);

		if( $limit != 0 )$teaser = substr( $teaser , 0 , $limit );
		if( $teaser != false ) return $teaser;
		else return "";
	
	}
	
	function getVideoCoursesInfoJson() {
	
		if( isset($_GET['author']) && isset($_GET['topic']) ) {
		
			$author = $_GET['author'] ; 
			$topic = $_GET['topic'] ; 
			
			if( $author == 'none' && $topic == 'none' ) {
			
				$sql = "SELECT *
						FROM {node n}
						LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
						WHERE n.status =1
						AND n.type = 'course'
						ORDER BY n.changed";
			
			} else if ( $author != 'none' && $topic == 'none' ) {
						
				$sql = "SELECT *
						FROM {node n}
						LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
						LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid )
						LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid)
						WHERE n.status =1
						AND td.vid = 7
						AND td.name='".$author."'
						AND n.type = 'course'
						ORDER BY n.changed DESC";
				
				
				
			} else if ( ($author == 'none' && $topic != 'none') || ($author != 'none' && $topic != 'none') ) {
			
				$sql = "SELECT *
						FROM {node n}
						LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
						LEFT JOIN {taxonomy_index ti} ON( nr.nid = ti.nid )
						LEFT JOIN {taxonomy_term_data td} ON( ti.tid = td.tid)
						WHERE n.status =1
						AND td.vid = 14
						AND td.name='".$topic."'
						AND n.type = 'course'
						ORDER BY n.changed DESC";			
			}	
		}
		else {
			
			$sql = "SELECT *
					FROM {node n}
					LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
					WHERE n.status =1
					AND n.type = 'course'
					ORDER BY n.changed";
		}
		// Run the query and process result
		$result = db_query( $sql );
		$result_arr = array();
		foreach ($result as $record) 
		{
			$node = node_load($nid = $record->nid );
			$title = $node->title;
			$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
			$vocab_terms1 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
			foreach( $vocab_terms1 as $t )	{	$authors[] = $t->name; }
			$primary_topic = taxonomy_term_load($node->field_primary_topic['und'][0]['tid']);
			$secondary_topics = array();
			$vocab_terms2 = _taxonomy_node_get_terms_by_vocabulary($node, 13 );
			foreach( $vocab_terms2 as $t )	{	$secondary_topics[] = $t->name; }
			$body  = get_clean_body( $node->body['und'][0]['value'] , 0 );
			$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
			
			
			if( (isset($_GET['author']) && isset($_GET['topic'])) && ($author != 'none' && $topic != 'none' ))	{
				
					if ( in_array($author, $authors) ) {
					
						$result_arr[]=  array(
										  "course_id"=> $node->nid ,	
										  "title"=> $title ,
										  "author"=> implode( "," , $authors ),
										  "date" => date( 'F jS, Y',$node->changed ),
										  "topic"=> $primary_topic->name ,
										  "keywords" => implode( "," , $secondary_topics ),
										  "body" => $body , 
										  "image" => $node->field_image_cdn_link['und'][0]['value'] , 
										  "path" => $path
										);
					}
				} else {
				
					$result_arr[]=  array(
										  "course_id"=> $node->nid ,	
										  "title"=> $title ,
										  "author"=> implode( "," , $authors ),
										  "date" => date( 'F jS, Y',$node->changed ),
										  "topic"=> $primary_topic->name ,
										  "keywords" => implode( "," , $secondary_topics ),
										  "body" => $body , 
										  "image" => $node->field_image_cdn_link['und'][0]['value'] , 
										  "path" => $path
										);
				}
		}
		
		echo json_encode_unicode($result_arr);
	
	}
	
	function getVideoLessonByCourseId() {
	
		if( isset($_GET['course_id']) ) {
		
			$course_id = $_GET['course_id'];
			$sql = "SELECT n.nid , n.title as lesson_title, cl.field_course_list_nid , el.field_event_list_nid , n2.title
					FROM {node n}
					LEFT JOIN {node_revision nr} ON ( n.nid = nr.nid AND n.vid = nr.vid )
					LEFT JOIN {field_data_field_event_list el} ON ( nr.nid = el.entity_id AND nr.vid = el.revision_id )
					LEFT JOIN {field_data_field_course_list cl} ON ( nr.nid = cl.entity_id AND nr.vid = cl.revision_id )
					LEFT JOIN {node n2} ON ( cl.field_course_list_nid = n2.nid OR el.field_event_list_nid = n2.nid )
					WHERE n.status =1
					AND n.type = 'lesson'
					AND n2.nid = '".$course_id."'
					ORDER BY n.changed DESC";
			
			// Processing the results
			$result = db_query( $sql );
			$result_arr = array();
			foreach ($result as $record) {
			
				$node = node_load($nid = $record->nid  );
				$title = $node->title;
				$title = preg_replace("/&#?[a-z0-9]+;/i","",$title); // removes $nbsp
				$vocab_terms1 = _taxonomy_node_get_terms_by_vocabulary($node, 7 );
				foreach( $vocab_terms1 as $t )	{	$authors[] = $t->name; }
				$primary_topic = taxonomy_term_load($node->field_primary_topic['und'][0]['tid']);
				$secondary_topics = array();
				$vocab_terms2 = _taxonomy_node_get_terms_by_vocabulary($node, 13 );
				foreach( $vocab_terms2 as $t )	{	$secondary_topics[] = $t->name; }
				$body  = get_clean_body( $node->body['und'][0]['value'] , 0 );
				$path = url(drupal_get_path_alias('node/' . $record->nid), array('absolute' => TRUE));
				$highlights = get_clean_body( $node->field_lesson_highlights['und'][0]['value'] , 0 );
				$resources = array();
				
				 if( sizeof( $node->field_lesson_resources) > 0  ) {
				
					$wrapper = entity_metadata_wrapper('node', $node);
					foreach ($wrapper->field_lesson_resources as $i)
					{
						$resources[] = array( 
												"resource_link" => $i->field_file_link->value() , 
												"resource_description" => $i->field_file_description->value() 
										);
					}
				 }
			
			
				$result_arr[]=  array(  "title"=> $title ,
										"author"=> implode( "," , $authors ),
										"date" => date( 'F jS, Y',$node->changed ),
										"topic"=> $primary_topic->name ,
										"keywords" => implode( "," , $secondary_topics ),
										"body" => $body , 
										"image" => 'http://twistassets.kabbalah.com/videos/'.$node->field_lesson_video['und'][0]['twistage_existing_videos'].'/screenshots/300w.jpg' , 
										"video_id" => $node->field_lesson_video['und'][0]['twistage_existing_videos'],
										"path" => $path,
										"highlights" => $highlights,
										"resources" => $resources
								);
			}
			echo json_encode_unicode($result_arr);
		
		
		} else {
			
			return "You need to send a title with the url";
		}
		
	}
	
	function json_encode_unicode($data) {
		return preg_replace_callback('/(?<!\\\\)\\\\u([0-9a-f]{4})/i',
		function ($m) {
		$d = pack("H*", $m[1]);
		$r = mb_convert_encoding($d, "UTF8", "UTF-16BE");
		return $r!=="?" && $r!=="" ? $r : $m[0];
		}, json_encode($data)
		);
	}
	